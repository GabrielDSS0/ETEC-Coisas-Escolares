Conceito: Modelo espiral é um modelo de desenvolvimento de software baseado em análise de riscos. Este modelo começa com prototipagens e objetivos modestos, e passa para metas mais amplas e complexas conforme o desenvolvimento e o cumprimento das etapas acontecem. O modelo espiral tem este nome pois, se baseando num desenho de espiral real, é como se o software começasse a ser desenvolvido pela parte interna da espiral, e, conforme o ciclo e as etapas de produção do projeto avançam, o desenvolvimento do sistema começa a alcançar as rodadas mais externas da espiral. Ao fim de todo ciclo de etapas do desenvolvimento do sistema, é realizada uma análise de risco do projeto.
Na prática, o modelo espiral promove uma vasta quantidade de modelos que podem ser utilizados no desenvolvimento de um sistema, visto que a cada rodada deste desenvolvimento pode-se usar modelos diferentes afim de cumprir as etapas do ciclo.

História: 
O modelo foi criado pelo Barry Boehm em 1988, e é descrito em seu artigo "A Spiral Model Of Software Development and Enhancement". Nele, Boehm produziu um diagrama que foi utilizado em muitas publicações posteriores sobre este modelo. Boehm descreveu o modelo espiral como um "processo de gerador de modelos", onde as escolhas são baseadas no risco do projeto gerar um modelo apropriado. O modelo incremental, o cascata, o de prototipação, e outros modelos são casos do modelo espiral que podem ter espaço em certos projetos.
Neste artigo, Boehm descreve as principais características do modelo espiral, além de também compará-lo com o modelo Cascata e demonstrar as diferenças entre os dois modelos.


Características principais:
O modelo espiral tem uma base fundamental em seus ciclos:
Primeiramente, o modelo espiral começa com a identificação do objetivos de certas partes do projetos (sua performance, sua funcionabilidade), os meios alternativos de implementação de partes do desenvolvimento e as restrições que a própria aplicação pode impor durante o desenvolvimento do sistema. A etapa seguinte é a avaliação das áreas de riscos do projeto. Nesta etapa, serão avaliadas as alternativas possíveis em caso de necessidade de mudança de objetivos devido às restrições estabelecidas.
Sendo assim, o modelo espiral já compreende, desde o início do desenvolvimento de um software, seus potenciais riscos e possíveis desvios durante a produção.
A etapa seguinte também tem haver com riscos: o objetivo desta é fazer um protótipo do sistema afim de analisar seus riscos principais, como os de interface e os relacionados com o que usuário entende na tela.
A análise de riscos do modelo espiral faz com que este modelo consiga abrigar outros modelos e sub-modelos de desenvolvimento de software no projeto.
Uma característica deste modelo é que, a última etapa de cada ciclo durante o desenvolvimento do sistema é sempre uma revisão do que foi aplicado dentro do software. Esta revisão acontece sobre tudo que aconteceu no desenvolvimento de um ciclo, assim como o planejamento para o próximo.
Logicamente, entre todas estas etapas estão o desenvolvimento, a prototipação, a produção, a implementação, o 'coding', os testes, etc.


Vantagens:
Entre suas vantagens, estão:
- A alta qualidade e quantidade de análise de riscos, diminuindo os imprevistos e a quantidade de desvios fatais durante o desenvolvimento do sistema.
- É um modelo de alto planejamento, onde está sempre planejando as etapas de desenvolvimento do projeto.
- O modelo consegue prever falhas e as principais dificuldades do projeto, antes mesmo de sua implementação.
- Consegue conter outros modelos e sub-modelos durante sua produção.


Desvantagens:
- Demanda alta equipe e, portanto, altos custos.
- É um projeto que envolve etapas longas e que podem consumir muito tempo.
- Portanto, este modelo não consegue servir projetos que não sejam de alta escala com uma equipe experiente e grande.

Utilização (exemplos de situações onde é mais utilizado):
O modelo espiral é utilizado principalmente em projetos de larga escala, já que suas etapas demandam uma equipe grande e experiente.
É utilizado também quando se quer prever e diminuir riscos no desenvolvimento de software.
E, por demandar muito tempo e conter muitas etapas, este modelo também é útil quando o prazo de um projeto for grande.


https://www.javatpoint.com/software-engineering-spiral-model
https://www.sciencedirect.com/topics/computer-science/spiral-model
http://www-scf.usc.edu/~csci201/lectures/Lecture11/boehm1988.pdf